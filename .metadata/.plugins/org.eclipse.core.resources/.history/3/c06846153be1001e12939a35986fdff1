package com.restcontroller.test;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get; //
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import com.entity.Student;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.restcontroller.StudentRestController;
import com.service.StudentService;

//This is a class-level annotation that helps to implement unit testing in the Spring MVC application, a test focused on Spring MVC components alone. 

@WebMvcTest(controllers = StudentRestController.class)
public class TestStudentRestController {

	// Spring Boot provides MockMvc to test the web layer of an application. MockMvc
	// handles the incoming HTTP request and hands it off to the controller without
	// the server it is started. So, it is preferable to test the Controllers with
	// MockMvc. But, make sure MockMvc is Autowired to the class that performs the
	// test.
	@Autowired
	private MockMvc mockMvc;

	//
	@InjectMocks
	private StudentRestController studentRestController;

	@MockBean
	private StudentService studentServiceImpl;
	Student student1;
	Student student2;
	List<Student> studentList = new ArrayList<Student>();

	@BeforeEach
	public void createStudentStud() {
		Student student1 = Student.builder().stdId(1).studName("Vikas").percentages(90).build();
		Student student2 = Student.builder().stdId(2).studName("Akash").percentages(83).build();
		studentList.add(student1);
		studentList.add(student2);
	}

	@Test
	public void testGetStudent() throws Exception {
		when(studentServiceImpl.selectStudentById(1)).thenReturn(student1);
		this.mockMvc.perform(get("/student/1")).andDo(print()).andExpect(status().isOk());
	}

	@Test
	public void testRemoveStudent() throws Exception {
		when(studentServiceImpl.deleteStudentById(1)).thenReturn("Record is Deleted");
		this.mockMvc.perform(delete("/student/1")).andDo(print()).andExpect(status().isOk());
	}

	@Test
	private void testAddStudent() throws Exception {
		ObjectMapper mapper = new ObjectMapper();
		mapper.configure(SerializationFeature.WRAP_ROOT_VALUE, false);
		ObjectWriter ow = mapper.writer().withDefaultPrettyPrinter();
		String requestJson = ow.writeValueAsString(student1);

		when(studentServiceImpl.insertStudent(student1)).thenReturn("Student's record added successfully");
		this.mockMvc.perform(post("/student").contentType(MediaType.APPLICATION_JSON).content(requestJson))
				.andDo(print()).andExpect(status().isOk());

	}

	@Test
	private void testChangeStudent() throws Exception {
		ObjectMapper mapper = new ObjectMapper();
		mapper.configure(SerializationFeature.WRAP_ROOT_VALUE, false);
		ObjectWriter ow = mapper.writer().withDefaultPrettyPrinter();
		String requestJson = ow.writeValueAsString(student1);

		when(studentServiceImpl.updateStudent(student1)).thenReturn("Student's record updated successfully");
		this.mockMvc.perform(put("/student").contentType(MediaType.APPLICATION_JSON).content(requestJson))
				.andDo(print()).andExpect(status().isOk());

	}

}
